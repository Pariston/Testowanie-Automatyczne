package com.example.restservicedemo.service;

import com.example.restservicedemo.domain.Car;
import com.example.restservicedemo.domain.Person;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by elzoy on 5/22/2016.
 */
public class CarManager {
    private Connection connection;

    private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
    private static final String CREATE_TABLE_CAR = "CREATE TABLE Car(id bigint GENERATED BY DEFAULT AS IDENTITY, make varchar(20), model varchar(20), yop integer, ownerId integer)";

    private PreparedStatement addCarStmt;
    private PreparedStatement removeCarStmt;
    private PreparedStatement deleteAllCarsStmt;
    private PreparedStatement getAllCarsStmt;
    private PreparedStatement getCarByIdStmt;
    private PreparedStatement getCarsByOwnerStmt;

    private Statement statement;

    public CarManager() {
        try {
            connection = DriverManager.getConnection(URL);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null,
                    null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Car".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists)
                statement.executeUpdate(CREATE_TABLE_CAR);

            addCarStmt = connection
                    .prepareStatement("INSERT INTO Car (id, make, model, yop, ownerId) VALUES (?, ?, ?, ?, ?)");
            removeCarStmt = connection
                    .prepareStatement("DELETE FROM Car where id = ?");
            deleteAllCarsStmt = connection
                    .prepareStatement("DELETE FROM Car");
            getAllCarsStmt = connection
                    .prepareStatement("SELECT id, make, model, yop, ownerId FROM Car");
            getCarByIdStmt = connection
                    .prepareStatement("SELECT id, make, model, yop, ownerId FROM Car where id = ?");
            getCarsByOwnerStmt = connection
                    .prepareStatement("SELECT id, make, model, yop, ownerId FROM Car where ownerId = ?");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    Connection getConnection() {
        return connection;
    }

    public void clearCars() {
        try {
            deleteAllCarsStmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public int addCar(Car car) {
        int count = 0;
        try {
            addCarStmt.setLong(1, car.getId());
            addCarStmt.setString(2, car.getMake());
            addCarStmt.setString(3, car.getModel());
            addCarStmt.setInt(4, car.getYop());
            addCarStmt.setInt(5, car.getOwnerId());
            count = addCarStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    public int removeCar(Car car) {
        int count = 0;
        try {
            removeCarStmt.setLong(1, car.getId());
            count = removeCarStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    public List<Car> getAllCars() {
        List<Car> cars = new ArrayList<Car>();

        try {
            ResultSet rs = getAllCarsStmt.executeQuery();

            while (rs.next()) {
                Car c = new Car();
                c.setId(rs.getInt("id"));
                c.setMake(rs.getString("make"));
                c.setModel(rs.getString("model"));
                c.setYop(rs.getInt("yop"));
                c.setOwnerId(rs.getInt("ownerId"));
                cars.add(c);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return cars;
    }

    public Car getCar(Long id) {
        Car c = new Car();
        try {
            getCarByIdStmt.setLong(1, id);
            ResultSet rs = getCarByIdStmt.executeQuery();

            while (rs.next()) {
                c.setId(rs.getInt("id"));
                c.setMake(rs.getString("make"));
                c.setModel(rs.getString("model"));
                c.setYop(rs.getInt("yop"));
                c.setOwnerId(rs.getInt("ownerId"));
                break;
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return c;
    }
}
